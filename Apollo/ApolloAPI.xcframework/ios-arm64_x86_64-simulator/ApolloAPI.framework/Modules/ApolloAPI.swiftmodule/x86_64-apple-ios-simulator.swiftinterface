// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ApolloAPI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import _Concurrency
import _StringProcessing
public enum Selection {
  case field(ApolloAPI.Selection.Field)
  case fragment(ApolloAPI.Fragment.Type)
  case inlineFragment(ApolloAPI.InlineFragment.Type)
  case conditional(ApolloAPI.Selection.Conditions, [ApolloAPI.Selection])
  public struct Field {
    public let name: Swift.String
    public let alias: Swift.String?
    public let arguments: [Swift.String : ApolloAPI.InputValue]?
    public let type: ApolloAPI.Selection.Field.OutputType
    public var responseKey: Swift.String {
      get
    }
    public init(_ name: Swift.String, alias: Swift.String? = nil, type: ApolloAPI.Selection.Field.OutputType, arguments: [Swift.String : ApolloAPI.InputValue]? = nil)
    indirect public enum OutputType {
      case scalar(ApolloAPI.ScalarType.Type)
      case customScalar(ApolloAPI.CustomScalarType.Type)
      case object(ApolloAPI.RootSelectionSet.Type)
      case nonNull(ApolloAPI.Selection.Field.OutputType)
      case list(ApolloAPI.Selection.Field.OutputType)
      public var namedType: ApolloAPI.Selection.Field.OutputType {
        get
      }
      public var isNullable: Swift.Bool {
        get
      }
    }
  }
  @inlinable public static func field(_ name: Swift.String, alias: Swift.String? = nil, _ type: ApolloAPI.OutputTypeConvertible.Type, arguments: [Swift.String : ApolloAPI.InputValue]? = nil) -> ApolloAPI.Selection {
    .field(.init(name, alias: alias, type: type._asOutputType, arguments: arguments))
  }
  @inlinable public static func include(if condition: Swift.String, _ selection: ApolloAPI.Selection) -> ApolloAPI.Selection {
    .conditional(Conditions([[Selection.Condition(stringLiteral: condition)]]), [selection])
  }
  @inlinable public static func include(if condition: Swift.String, _ selections: [ApolloAPI.Selection]) -> ApolloAPI.Selection {
    .conditional(Conditions([[Selection.Condition(stringLiteral: condition)]]), selections)
  }
  @inlinable public static func include(if conditions: ApolloAPI.Selection.Conditions, _ selection: ApolloAPI.Selection) -> ApolloAPI.Selection {
    .conditional(conditions, [selection])
  }
  @inlinable public static func include(if conditions: ApolloAPI.Selection.Conditions, _ selections: [ApolloAPI.Selection]) -> ApolloAPI.Selection {
    .conditional(conditions, selections)
  }
  @inlinable public static func include(if condition: ApolloAPI.Selection.Condition, _ selection: ApolloAPI.Selection) -> ApolloAPI.Selection {
    .conditional(Conditions([[condition]]), [selection])
  }
  @inlinable public static func include(if condition: ApolloAPI.Selection.Condition, _ selections: [ApolloAPI.Selection]) -> ApolloAPI.Selection {
    .conditional(Conditions([[condition]]), selections)
  }
  @inlinable public static func include(if conditions: [ApolloAPI.Selection.Condition], _ selection: ApolloAPI.Selection) -> ApolloAPI.Selection {
    .conditional(Conditions([conditions]), [selection])
  }
  @inlinable public static func include(if conditions: [ApolloAPI.Selection.Condition], _ selections: [ApolloAPI.Selection]) -> ApolloAPI.Selection {
    .conditional(Conditions([conditions]), selections)
  }
}
extension ApolloAPI.Selection : Swift.Hashable {
  public static func == (lhs: ApolloAPI.Selection, rhs: ApolloAPI.Selection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ApolloAPI.Selection.Field : Swift.Hashable {
  public static func == (lhs: ApolloAPI.Selection.Field, rhs: ApolloAPI.Selection.Field) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ApolloAPI.Selection.Field.OutputType : Swift.Hashable {
  public static func == (lhs: ApolloAPI.Selection.Field.OutputType, rhs: ApolloAPI.Selection.Field.OutputType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LocalCacheMutation : AnyObject, Swift.Hashable {
  static var operationType: ApolloAPI.GraphQLOperationType { get }
  var __variables: [Swift.String : ApolloAPI.GraphQLOperationVariableValue]? { get }
  associatedtype Data : ApolloAPI.MutableRootSelectionSet
}
extension ApolloAPI.LocalCacheMutation {
  public var __variables: [Swift.String : ApolloAPI.GraphQLOperationVariableValue]? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
public protocol MutableSelectionSet : ApolloAPI.SelectionSet {
  var __data: ApolloAPI.DataDict { get set }
}
extension ApolloAPI.MutableSelectionSet {
  @inlinable public var __typename: Swift.String {
    get { __data["__typename"] }
    set { __data["__typename"] = newValue }
  }
}
extension ApolloAPI.MutableSelectionSet where Self.Fragments : ApolloAPI.FragmentContainer {
  @inlinable public var fragments: Self.Fragments {
    get { Self.Fragments(data: __data) }
    @available(*, unavailable, message: "mutate properties of the fragment instead.")
    set { preconditionFailure("") }
    _modify {
      var f = Self.Fragments(data: __data)
      yield &f
      self.__data._data = f.__data._data
    }
  }
}
public protocol MutableRootSelectionSet : ApolloAPI.MutableSelectionSet, ApolloAPI.RootSelectionSet {
}
public protocol AnySelectionSet : ApolloAPI.SelectionSetEntityValue {
  static var __schema: ApolloAPI.SchemaMetadata.Type { get }
  static var __selections: [ApolloAPI.Selection] { get }
  static var __parentType: ApolloAPI.ParentType { get }
  var __data: ApolloAPI.DataDict { get }
  init(data: ApolloAPI.DataDict)
}
extension ApolloAPI.AnySelectionSet {
  public static var __selections: [ApolloAPI.Selection] {
    get
  }
}
public protocol RootSelectionSet : ApolloAPI.AnySelectionSet, ApolloAPI.OutputTypeConvertible {
}
public protocol InlineFragment : ApolloAPI.AnySelectionSet {
}
public protocol SelectionSet : ApolloAPI.AnySelectionSet, Swift.Hashable {
  associatedtype Schema : ApolloAPI.SchemaMetadata
  associatedtype Fragments = ApolloAPI.NoFragments
}
extension ApolloAPI.SelectionSet {
  @inlinable public static var __schema: ApolloAPI.SchemaMetadata.Type {
    get { Schema.self }
  }
  @usableFromInline
  internal var __objectType: ApolloAPI.Object? {
    get
  }
  @inlinable public var __typename: Swift.String {
    get { __data["__typename"] }
  }
  @inlinable public func _asInlineFragment<T>(if conditions: ApolloAPI.Selection.Conditions? = nil) -> T? where T : ApolloAPI.SelectionSet, Self.Schema == T.Schema {
    guard let conditions = conditions else {
      return _asType()
    }

    return conditions.evaluate(with: __data._variables) ? _asType() : nil
  }
  @usableFromInline
  internal func _asType<T>() -> T? where T : ApolloAPI.SelectionSet, Self.Schema == T.Schema
  @inlinable public func _asInlineFragment<T>(if conditions: [ApolloAPI.Selection.Condition]) -> T? where T : ApolloAPI.SelectionSet, Self.Schema == T.Schema {
    _asInlineFragment(if: Selection.Conditions([conditions]))
  }
  @inlinable public func _asInlineFragment<T>(if condition: ApolloAPI.Selection.Condition) -> T? where T : ApolloAPI.SelectionSet, Self.Schema == T.Schema {
    _asInlineFragment(if: Selection.Conditions(condition))
  }
  @inlinable public func hash(into hasher: inout Swift.Hasher) {
    hasher.combine(__data)
  }
  @inlinable public static func == (lhs: Self, rhs: Self) -> Swift.Bool {
    return lhs.__data == rhs.__data
  }
}
extension ApolloAPI.SelectionSet where Self.Fragments : ApolloAPI.FragmentContainer {
  public var fragments: Self.Fragments {
    get
  }
}
public protocol SchemaMetadata {
  static var configuration: ApolloAPI.SchemaConfiguration.Type { get }
  static func objectType(forTypename typename: Swift.String) -> ApolloAPI.Object?
}
extension ApolloAPI.SchemaMetadata {
  @inlinable public static func graphQLType(for object: ApolloAPI.JSONObject) -> ApolloAPI.Object? {
    guard let typename = object["__typename"] as? String else {
      return nil
    }
    return objectType(forTypename: typename) ??
    Object(typename: typename, implementedInterfaces: [])
  }
  @inlinable public static func cacheKey(for object: ApolloAPI.JSONObject) -> ApolloAPI.CacheReference? {
    guard let type = graphQLType(for: object),
          let info = configuration.cacheKeyInfo(for: type, object: object) else {
      return nil
    }
    return CacheReference("\(info.uniqueKeyGroup ?? type.typename):\(info.id)")
  }
}
public typealias JSONValue = Swift.AnyHashable
public typealias JSONObject = [Swift.String : ApolloAPI.JSONValue]
public typealias JSONEncodableDictionary = [Swift.String : ApolloAPI.JSONEncodable]
public protocol JSONDecodable : ApolloAPI.AnyHashableConvertible {
  init(_jsonValue value: ApolloAPI.JSONValue) throws
}
public protocol JSONEncodable {
  var _jsonValue: ApolloAPI.JSONValue { get }
}
public protocol SchemaConfiguration {
  static func cacheKeyInfo(for type: ApolloAPI.Object, object: ApolloAPI.JSONObject) -> ApolloAPI.CacheKeyInfo?
}
public enum GraphQLOperationType : Swift.Hashable {
  case query
  case mutation
  case subscription
  public static func == (a: ApolloAPI.GraphQLOperationType, b: ApolloAPI.GraphQLOperationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DocumentType {
  case notPersisted(definition: ApolloAPI.OperationDefinition)
  case automaticallyPersisted(operationIdentifier: Swift.String, definition: ApolloAPI.OperationDefinition)
  case persistedOperationsOnly(operationIdentifier: Swift.String)
}
public struct OperationDefinition {
  public init(_ definition: Swift.String, fragments: [ApolloAPI.Fragment.Type]? = nil)
  public var queryDocument: Swift.String {
    get
  }
}
public protocol GraphQLOperation : AnyObject, Swift.Hashable {
  typealias Variables = [Swift.String : ApolloAPI.GraphQLOperationVariableValue]
  static var operationName: Swift.String { get }
  static var operationType: ApolloAPI.GraphQLOperationType { get }
  static var document: ApolloAPI.DocumentType { get }
  var __variables: Self.Variables? { get }
  associatedtype Data : ApolloAPI.RootSelectionSet
}
extension ApolloAPI.GraphQLOperation {
  public var __variables: Self.Variables? {
    get
  }
  public static var definition: ApolloAPI.OperationDefinition? {
    get
  }
  public static var operationIdentifier: Swift.String? {
    get
  }
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol GraphQLQuery : ApolloAPI.GraphQLOperation {
}
extension ApolloAPI.GraphQLQuery {
  @inlinable public static var operationType: ApolloAPI.GraphQLOperationType {
    get { return .query }
  }
}
public protocol GraphQLMutation : ApolloAPI.GraphQLOperation {
}
extension ApolloAPI.GraphQLMutation {
  @inlinable public static var operationType: ApolloAPI.GraphQLOperationType {
    get { return .mutation }
  }
}
public protocol GraphQLSubscription : ApolloAPI.GraphQLOperation {
}
extension ApolloAPI.GraphQLSubscription {
  @inlinable public static var operationType: ApolloAPI.GraphQLOperationType {
    get { return .subscription }
  }
}
public protocol GraphQLOperationVariableValue {
  var _jsonEncodableValue: (ApolloAPI.JSONEncodable)? { get }
}
extension Swift.Array : ApolloAPI.GraphQLOperationVariableValue where Element : ApolloAPI.GraphQLOperationVariableValue, Element : Swift.Hashable {
}
extension Swift.Dictionary : ApolloAPI.GraphQLOperationVariableValue where Key == Swift.String, Value == ApolloAPI.GraphQLOperationVariableValue {
  @inlinable public var _jsonEncodableValue: (ApolloAPI.JSONEncodable)? {
    get { _jsonEncodableObject }
  }
  @inlinable public var _jsonEncodableObject: ApolloAPI.JSONEncodableDictionary {
    get {
    compactMapValues { $0._jsonEncodableValue }
  }
  }
}
extension ApolloAPI.GraphQLNullable : ApolloAPI.GraphQLOperationVariableValue where Wrapped : ApolloAPI.GraphQLOperationVariableValue {
  @inlinable public var _jsonEncodableValue: (ApolloAPI.JSONEncodable)? {
    get {
    switch self {
    case .none: return nil
    case .null: return NSNull()
    case let .some(value): return value._jsonEncodableValue
    }
  }
  }
}
extension Swift.Optional : ApolloAPI.GraphQLOperationVariableValue where Wrapped : ApolloAPI.GraphQLOperationVariableValue {
  @inlinable public var _jsonEncodableValue: (ApolloAPI.JSONEncodable)? {
    get {
    switch self {
    case .none: return nil    
    case let .some(value): return value._jsonEncodableValue
    }
  }
  }
}
extension ApolloAPI.JSONEncodable where Self : ApolloAPI.GraphQLOperationVariableValue {
  @inlinable public var _jsonEncodableValue: (ApolloAPI.JSONEncodable)? {
    get { self }
  }
}
public struct CacheKeyInfo {
  public let id: Swift.String
  public let uniqueKeyGroup: Swift.String?
  @inlinable public init(jsonValue: ApolloAPI.JSONValue?, uniqueKeyGroup: Swift.String? = nil) throws {
    guard let jsonValue = jsonValue else {
      throw JSONDecodingError.missingValue
    }

    self.init(id: try String(_jsonValue: jsonValue), uniqueKeyGroup: uniqueKeyGroup)
  }
  public init(id: Swift.String, uniqueKeyGroup: Swift.String? = nil)
}
public protocol Fragment : ApolloAPI.AnySelectionSet {
  static var fragmentDefinition: Swift.StaticString { get }
}
public protocol FragmentContainer {
  var __data: ApolloAPI.DataDict { get }
  init(data: ApolloAPI.DataDict)
}
extension ApolloAPI.FragmentContainer {
  @inlinable public func _toFragment<T>() -> T where T : ApolloAPI.Fragment {
    _convertToFragment()
  }
  @usableFromInline
  internal func _convertToFragment<T>() -> T where T : ApolloAPI.Fragment
  @inlinable public func _toFragment<T>(if conditions: ApolloAPI.Selection.Conditions? = nil) -> T? where T : ApolloAPI.Fragment {
    guard let conditions = conditions else {
      return _convertToFragment()
    }

    return conditions.evaluate(with: __data._variables) ? _convertToFragment() : nil
  }
  @inlinable public func _toFragment<T>(if conditions: [ApolloAPI.Selection.Condition]) -> T? where T : ApolloAPI.Fragment {
    return _toFragment(if: Selection.Conditions([conditions]))
  }
  @inlinable public func _toFragment<T>(if condition: ApolloAPI.Selection.Condition) -> T? where T : ApolloAPI.Fragment {
    return _toFragment(if: Selection.Conditions(condition))
  }
}
public enum NoFragments {
}
public protocol AnyScalarType : ApolloAPI.AnyHashableConvertible, ApolloAPI.JSONEncodable {
}
public protocol ScalarType : ApolloAPI.AnyScalarType, ApolloAPI.GraphQLOperationVariableValue, ApolloAPI.JSONDecodable {
}
extension Swift.String : ApolloAPI.ScalarType {
}
extension Swift.Int : ApolloAPI.ScalarType {
}
extension Swift.Bool : ApolloAPI.ScalarType {
}
extension Swift.Float : ApolloAPI.ScalarType {
}
extension Swift.Double : ApolloAPI.ScalarType {
}
public protocol CustomScalarType : ApolloAPI.AnyScalarType, ApolloAPI.GraphQLOperationVariableValue, ApolloAPI.JSONDecodable, ApolloAPI.OutputTypeConvertible {
}
extension ApolloAPI.CustomScalarType {
  @inlinable public static var _asOutputType: ApolloAPI.Selection.Field.OutputType {
    get {
    .nonNull(.customScalar(self))
  }
  }
}
extension Swift.Array : ApolloAPI.AnyScalarType where Element : ApolloAPI.AnyScalarType, Element : Swift.Hashable {
}
extension Swift.Optional : ApolloAPI.AnyScalarType where Wrapped : ApolloAPI.AnyScalarType, Wrapped : Swift.Hashable {
}
public struct CacheReference : Swift.Hashable {
  public static let RootQuery: ApolloAPI.CacheReference
  public static let RootMutation: ApolloAPI.CacheReference
  public static let RootSubscription: ApolloAPI.CacheReference
  public static func rootCacheReference(for operationType: ApolloAPI.GraphQLOperationType) -> ApolloAPI.CacheReference
  public let key: Swift.String
  public init(_ key: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ApolloAPI.CacheReference, b: ApolloAPI.CacheReference) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ApolloAPI.CacheReference : Swift.CustomStringConvertible {
  @inlinable public var description: Swift.String {
    get {
    return "-> #\(key)"
  }
  }
}
public protocol AnyHashableConvertible {
  var _asAnyHashable: Swift.AnyHashable { get }
}
extension ApolloAPI.AnyHashableConvertible where Self : Swift.Hashable {
  @inlinable public var _asAnyHashable: Swift.AnyHashable {
    get { self }
  }
}
extension Swift.AnyHashable : ApolloAPI.AnyHashableConvertible {
}
extension Swift.Optional : ApolloAPI.AnyHashableConvertible where Wrapped : Swift.Hashable {
}
extension Swift.Dictionary : ApolloAPI.AnyHashableConvertible where Value : Swift.Hashable {
}
extension Swift.Array : ApolloAPI.AnyHashableConvertible where Element : Swift.Hashable {
}
@dynamicMemberLookup public enum GraphQLNullable<Wrapped> {
  case none
  case null
  case some(Wrapped)
  @inlinable public var unwrapped: Wrapped? {
    get {
    guard case let .some(wrapped) = self else { return nil }
    return wrapped
  }
  }
  @inlinable public subscript<T>(dynamicMember path: Swift.KeyPath<Wrapped, T>) -> T? {
    get {
    unwrapped?[keyPath: path]
  }
  }
}
extension ApolloAPI.GraphQLNullable : Swift.ExpressibleByNilLiteral {
  @inlinable public init(nilLiteral: ()) {
    self = .none
  }
}
extension ApolloAPI.GraphQLNullable : Swift.ExpressibleByUnicodeScalarLiteral where Wrapped : Swift.ExpressibleByUnicodeScalarLiteral {
  @inlinable public init(unicodeScalarLiteral value: Wrapped.UnicodeScalarLiteralType) {
    self = .some(Wrapped(unicodeScalarLiteral: value))
  }
  public typealias UnicodeScalarLiteralType = Wrapped.UnicodeScalarLiteralType
}
extension ApolloAPI.GraphQLNullable : Swift.ExpressibleByExtendedGraphemeClusterLiteral where Wrapped : Swift.ExpressibleByExtendedGraphemeClusterLiteral {
  @inlinable public init(extendedGraphemeClusterLiteral value: Wrapped.ExtendedGraphemeClusterLiteralType) {
    self = .some(Wrapped(extendedGraphemeClusterLiteral: value))
  }
  public typealias ExtendedGraphemeClusterLiteralType = Wrapped.ExtendedGraphemeClusterLiteralType
}
extension ApolloAPI.GraphQLNullable : Swift.ExpressibleByStringLiteral where Wrapped : Swift.ExpressibleByStringLiteral {
  @inlinable public init(stringLiteral value: Wrapped.StringLiteralType) {
    self = .some(Wrapped(stringLiteral: value))
  }
  public typealias StringLiteralType = Wrapped.StringLiteralType
}
extension ApolloAPI.GraphQLNullable : Swift.ExpressibleByIntegerLiteral where Wrapped : Swift.ExpressibleByIntegerLiteral {
  @inlinable public init(integerLiteral value: Wrapped.IntegerLiteralType) {
    self = .some(Wrapped(integerLiteral: value))
  }
  public typealias IntegerLiteralType = Wrapped.IntegerLiteralType
}
extension ApolloAPI.GraphQLNullable : Swift.ExpressibleByFloatLiteral where Wrapped : Swift.ExpressibleByFloatLiteral {
  @inlinable public init(floatLiteral value: Wrapped.FloatLiteralType) {
    self = .some(Wrapped(floatLiteral: value))
  }
  public typealias FloatLiteralType = Wrapped.FloatLiteralType
}
extension ApolloAPI.GraphQLNullable : Swift.ExpressibleByBooleanLiteral where Wrapped : Swift.ExpressibleByBooleanLiteral {
  @inlinable public init(booleanLiteral value: Wrapped.BooleanLiteralType) {
    self = .some(Wrapped(booleanLiteral: value))
  }
  public typealias BooleanLiteralType = Wrapped.BooleanLiteralType
}
extension ApolloAPI.GraphQLNullable : Swift.ExpressibleByArrayLiteral where Wrapped : ApolloAPI._InitializableByArrayLiteralElements {
  @inlinable public init(arrayLiteral elements: Wrapped.ArrayLiteralElement...) {
    self = .some(Wrapped(elements))
  }
  public typealias ArrayLiteralElement = Wrapped.ArrayLiteralElement
}
extension ApolloAPI.GraphQLNullable : Swift.ExpressibleByDictionaryLiteral where Wrapped : ApolloAPI._InitializableByDictionaryLiteralElements {
  @inlinable public init(dictionaryLiteral elements: (Wrapped.Key, Wrapped.Value)...) {
    self = .some(Wrapped(elements))
  }
  public typealias Key = Wrapped.Key
  public typealias Value = Wrapped.Value
}
public protocol _InitializableByArrayLiteralElements : Swift.ExpressibleByArrayLiteral {
  init(_ array: [Self.ArrayLiteralElement])
}
extension Swift.Array : ApolloAPI._InitializableByArrayLiteralElements {
}
public protocol _InitializableByDictionaryLiteralElements : Swift.ExpressibleByDictionaryLiteral {
  init(_ elements: [(Self.Key, Self.Value)])
}
extension Swift.Dictionary : ApolloAPI._InitializableByDictionaryLiteralElements {
  @inlinable public init(_ elements: [(Key, Value)]) {
    self.init(uniqueKeysWithValues: elements)
  }
}
extension ApolloAPI.GraphQLNullable {
  @inlinable public init<T>(_ caseValue: T) where Wrapped == ApolloAPI.GraphQLEnum<T>, T : ApolloAPI.EnumType {
    self = .some(Wrapped(caseValue))
  }
  @inlinable public init(_ object: Wrapped) where Wrapped : ApolloAPI.InputObject {
    self = .some(object)
  }
}
@_disfavoredOverload @inlinable public func ?? <T>(lhs: T?, rhs: ApolloAPI.GraphQLNullable<T>) -> ApolloAPI.GraphQLNullable<T> {
  if let lhs = lhs {
    return .some(lhs)
  }
  return rhs
}
extension ApolloAPI.GraphQLNullable : Swift.Equatable where Wrapped : Swift.Equatable {
  public static func == (a: ApolloAPI.GraphQLNullable<Wrapped>, b: ApolloAPI.GraphQLNullable<Wrapped>) -> Swift.Bool
}
extension ApolloAPI.GraphQLNullable : Swift.Hashable where Wrapped : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol OutputTypeConvertible {
  @inlinable static var _asOutputType: ApolloAPI.Selection.Field.OutputType { get }
}
extension Swift.String : ApolloAPI.OutputTypeConvertible {
  public static let _asOutputType: ApolloAPI.Selection.Field.OutputType
}
extension Swift.Int : ApolloAPI.OutputTypeConvertible {
  public static let _asOutputType: ApolloAPI.Selection.Field.OutputType
}
extension Swift.Bool : ApolloAPI.OutputTypeConvertible {
  public static let _asOutputType: ApolloAPI.Selection.Field.OutputType
}
extension Swift.Float : ApolloAPI.OutputTypeConvertible {
  public static let _asOutputType: ApolloAPI.Selection.Field.OutputType
}
extension Swift.Double : ApolloAPI.OutputTypeConvertible {
  public static let _asOutputType: ApolloAPI.Selection.Field.OutputType
}
extension Swift.Optional : ApolloAPI.OutputTypeConvertible where Wrapped : ApolloAPI.OutputTypeConvertible {
  @inlinable public static var _asOutputType: ApolloAPI.Selection.Field.OutputType {
    get {
    guard case let .nonNull(wrappedOutputType) = Wrapped._asOutputType else {
      return Wrapped._asOutputType
    }
    return wrappedOutputType
  }
  }
}
extension Swift.Array : ApolloAPI.OutputTypeConvertible where Element : ApolloAPI.OutputTypeConvertible {
  @inlinable public static var _asOutputType: ApolloAPI.Selection.Field.OutputType {
    get {
    .nonNull(.list(Element._asOutputType))
  }
  }
}
extension ApolloAPI.RootSelectionSet {
  @inlinable public static var _asOutputType: ApolloAPI.Selection.Field.OutputType {
    get {
    .nonNull(.object(self))
  }
  }
}
public protocol ParentType {
  @inlinable func canBeConverted(from objectType: ApolloAPI.Object) -> Swift.Bool
}
extension ApolloAPI.Object : ApolloAPI.ParentType {
  @inlinable public func canBeConverted(from objectType: ApolloAPI.Object) -> Swift.Bool {
    objectType.typename == self.typename
  }
}
extension ApolloAPI.Interface : ApolloAPI.ParentType {
  @inlinable public func canBeConverted(from objectType: ApolloAPI.Object) -> Swift.Bool {
    objectType.implements(self)
  }
}
extension ApolloAPI.Union : ApolloAPI.ParentType {
  @inlinable public func canBeConverted(from objectType: ApolloAPI.Object) -> Swift.Bool {
    possibleTypes.contains(where: { $0 == objectType })
  }
}
public struct DataDict : Swift.Hashable {
  public var _data: ApolloAPI.JSONObject
  public let _variables: [Swift.String : ApolloAPI.GraphQLOperationVariableValue]?
  public init(_ data: ApolloAPI.JSONObject, variables: [Swift.String : ApolloAPI.GraphQLOperationVariableValue]?)
  @inlinable public subscript<T>(key: Swift.String) -> T where T : ApolloAPI.AnyScalarType, T : Swift.Hashable {
    get { _data[key] as! T }
    set { _data[key] = newValue }
    _modify {
      var value = _data[key] as! T
      defer { _data[key] = value }
      yield &value
    }
  }
  @inlinable public subscript<T>(key: Swift.String) -> T where T : ApolloAPI.SelectionSetEntityValue {
    get { T.init(fieldData: _data[key], variables: _variables) }
    set { _data[key] = newValue._fieldData }
    _modify {
      var value = T.init(fieldData: _data[key], variables: _variables)
      defer { _data[key] = value._fieldData }
      yield &value
    }
  }
  @inlinable public func hash(into hasher: inout Swift.Hasher) {
    hasher.combine(_data)
    hasher.combine(_variables?._jsonEncodableValue?._jsonValue)
  }
  @inlinable public static func == (lhs: ApolloAPI.DataDict, rhs: ApolloAPI.DataDict) -> Swift.Bool {
    lhs._data == rhs._data &&
    lhs._variables?._jsonEncodableValue?._jsonValue == rhs._variables?._jsonEncodableValue?._jsonValue
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SelectionSetEntityValue {
  init(fieldData: Swift.AnyHashable?, variables: [Swift.String : ApolloAPI.GraphQLOperationVariableValue]?)
  var _fieldData: Swift.AnyHashable { get }
}
extension ApolloAPI.AnySelectionSet {
  @inlinable public init(fieldData: Swift.AnyHashable?, variables: [Swift.String : ApolloAPI.GraphQLOperationVariableValue]?) {
    guard let fieldData = fieldData as? JSONObject else {
      fatalError("\(Self.self) expected data for entity.")
    }
    self.init(data: DataDict(fieldData, variables: variables))
  }
  @inlinable public var _fieldData: Swift.AnyHashable {
    get { __data._data }
  }
}
extension Swift.Optional : ApolloAPI.SelectionSetEntityValue where Wrapped : ApolloAPI.SelectionSetEntityValue {
  @inlinable public init(fieldData: Swift.AnyHashable?, variables: [Swift.String : ApolloAPI.GraphQLOperationVariableValue]?) {
    guard case let .some(fieldData) = fieldData else {
      self = .none
      return
    }
    self = .some(Wrapped.init(fieldData: fieldData, variables: variables))
  }
  @inlinable public var _fieldData: Swift.AnyHashable {
    get { map(\._fieldData) }
  }
}
extension Swift.Array : ApolloAPI.SelectionSetEntityValue where Element : ApolloAPI.SelectionSetEntityValue {
  @inlinable public init(fieldData: Swift.AnyHashable?, variables: [Swift.String : ApolloAPI.GraphQLOperationVariableValue]?) {
    guard let fieldData = fieldData as? [AnyHashable?] else {
      fatalError("\(Self.self) expected list of data for entity.")
    }
    self = fieldData.map { Element.init(fieldData:$0, variables: variables) }
  }
  @inlinable public var _fieldData: Swift.AnyHashable {
    get { map(\._fieldData) }
  }
}
public struct Interface : Swift.Hashable {
  public let name: Swift.String
  public init(name: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ApolloAPI.Interface, b: ApolloAPI.Interface) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol InputObject : ApolloAPI.GraphQLOperationVariableValue, ApolloAPI.JSONEncodable, Swift.Hashable {
  var __data: ApolloAPI.InputDict { get }
}
extension ApolloAPI.InputObject {
  public var _jsonValue: ApolloAPI.JSONValue {
    get
  }
  public var jsonEncodableValue: (ApolloAPI.JSONEncodable)? {
    get
  }
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
public struct InputDict : ApolloAPI.GraphQLOperationVariableValue, Swift.Hashable {
  public init(_ data: [Swift.String : ApolloAPI.GraphQLOperationVariableValue] = [:])
  public var _jsonEncodableValue: (ApolloAPI.JSONEncodable)? {
    get
  }
  public subscript<T>(key: Swift.String) -> T where T : ApolloAPI.GraphQLOperationVariableValue {
    get
    set
  }
  public static func == (lhs: ApolloAPI.InputDict, rhs: ApolloAPI.InputDict) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum JSONDecodingError : Swift.Error, Foundation.LocalizedError, Swift.Hashable {
  case missingValue
  case nullValue
  case wrongType
  case couldNotConvert(value: Swift.AnyHashable, to: Any.Type)
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (lhs: ApolloAPI.JSONDecodingError, rhs: ApolloAPI.JSONDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol EnumType : ApolloAPI.GraphQLOperationVariableValue, ApolloAPI.JSONEncodable, Swift.CaseIterable, Swift.RawRepresentable where Self.RawValue == Swift.String {
}
public struct Object : Swift.Hashable {
  public init(typename: Swift.String, implementedInterfaces: [ApolloAPI.Interface])
  public let implementedInterfaces: [ApolloAPI.Interface]
  public let typename: Swift.String
  public func implements(_ interface: ApolloAPI.Interface) -> Swift.Bool
  public static func == (lhs: ApolloAPI.Object, rhs: ApolloAPI.Object) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
indirect public enum InputValue {
  case scalar(ApolloAPI.ScalarType)
  case variable(Swift.String)
  case list([ApolloAPI.InputValue])
  case object([Swift.String : ApolloAPI.InputValue])
  case null
}
extension ApolloAPI.InputValue : Swift.ExpressibleByStringLiteral {
  @inlinable public init(stringLiteral value: Swift.StringLiteralType) {
    self = .scalar(value)
  }
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension ApolloAPI.InputValue : Swift.ExpressibleByIntegerLiteral {
  @inlinable public init(integerLiteral value: Swift.IntegerLiteralType) {
    self = .scalar(value)
  }
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension ApolloAPI.InputValue : Swift.ExpressibleByFloatLiteral {
  @inlinable public init(floatLiteral value: Swift.FloatLiteralType) {
    self = .scalar(value)
  }
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension ApolloAPI.InputValue : Swift.ExpressibleByBooleanLiteral {
  @inlinable public init(booleanLiteral value: Swift.BooleanLiteralType) {
    self = .scalar(value)
  }
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension ApolloAPI.InputValue : Swift.ExpressibleByArrayLiteral {
  @inlinable public init(arrayLiteral elements: ApolloAPI.InputValue...) {
    self = .list(Array(elements.map { $0 }))
  }
  public typealias ArrayLiteralElement = ApolloAPI.InputValue
}
extension ApolloAPI.InputValue : Swift.ExpressibleByDictionaryLiteral {
  @inlinable public init(dictionaryLiteral elements: (Swift.String, ApolloAPI.InputValue)...) {
    self = .object(Dictionary(elements.map{ ($0.0, $0.1) },
                              uniquingKeysWith: { (_, last) in last }))
  }
  public typealias Key = Swift.String
  public typealias Value = ApolloAPI.InputValue
}
extension ApolloAPI.InputValue : Swift.Hashable {
  public static func == (lhs: ApolloAPI.InputValue, rhs: ApolloAPI.InputValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.String : ApolloAPI.JSONDecodable, ApolloAPI.JSONEncodable {
  @inlinable public init(_jsonValue value: ApolloAPI.JSONValue) throws {
    switch value.base {
    case let string as String:
        self = string
    case let int as Int:
      self = String(int)
    case let int64 as Int64:
      self = String(int64)
    case let double as Double:
      self = String(double)
    default:
        throw JSONDecodingError.couldNotConvert(value: value, to: String.self)
    }
  }
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get {
    return self
  }
  }
}
extension Swift.Int : ApolloAPI.JSONDecodable, ApolloAPI.JSONEncodable {
  @inlinable public init(_jsonValue value: ApolloAPI.JSONValue) throws {
    guard let number = value as? NSNumber else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Int.self)
    }
    self = number.intValue
  }
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get {
    return self
  }
  }
}
extension Swift.Float : ApolloAPI.JSONDecodable, ApolloAPI.JSONEncodable {
  @inlinable public init(_jsonValue value: ApolloAPI.JSONValue) throws {
    guard let number = value as? NSNumber else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Float.self)
    }
    self = number.floatValue
  }
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get {
    return self
  }
  }
}
extension Swift.Double : ApolloAPI.JSONDecodable, ApolloAPI.JSONEncodable {
  @inlinable public init(_jsonValue value: ApolloAPI.JSONValue) throws {
    guard let number = value as? NSNumber else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Double.self)
    }
    self = number.doubleValue
  }
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get {
    return self
  }
  }
}
extension Swift.Bool : ApolloAPI.JSONDecodable, ApolloAPI.JSONEncodable {
  @inlinable public init(_jsonValue value: ApolloAPI.JSONValue) throws {
    guard let bool = value as? Bool else {
        throw JSONDecodingError.couldNotConvert(value: value, to: Bool.self)
    }
    self = bool
  }
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get {
    return self
  }
  }
}
extension ApolloAPI.EnumType {
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get { rawValue }
  }
}
extension Swift.RawRepresentable where Self.RawValue : ApolloAPI.JSONDecodable {
  @inlinable public init(_jsonValue value: ApolloAPI.JSONValue) throws {
    let rawValue = try RawValue(_jsonValue: value)
    if let tempSelf = Self(rawValue: rawValue) {
      self = tempSelf
    } else {
      throw JSONDecodingError.couldNotConvert(value: value, to: Self.self)
    }
  }
}
extension Swift.RawRepresentable where Self.RawValue : ApolloAPI.JSONEncodable {
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get {
    return rawValue._jsonValue
  }
  }
}
extension Swift.Optional where Wrapped : ApolloAPI.JSONDecodable {
  @inlinable public init(jsonValue value: ApolloAPI.JSONValue) throws {
    if value is NSNull {
      self = .none
    } else {
      self = .some(try Wrapped(_jsonValue: value))
    }
  }
}
extension Swift.Optional : ApolloAPI.JSONEncodable where Wrapped : ApolloAPI.JSONEncodable, Wrapped : Swift.Hashable {
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get {
    switch self {
    case .none: return NSNull()
    case let .some(value): return value._jsonValue
    }
  }
  }
}
extension Foundation.NSDictionary : ApolloAPI.JSONEncodable {
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get { self }
  }
}
extension Foundation.NSNull : ApolloAPI.JSONEncodable {
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get { self }
  }
}
extension Swift.Dictionary : ApolloAPI.JSONEncodable where Key == Swift.String, Value == ApolloAPI.JSONEncodable {
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get { _jsonObject }
  }
  @inlinable public var _jsonObject: ApolloAPI.JSONObject {
    get {
    mapValues(\._jsonValue)
  }
  }
}
extension Swift.Dictionary : ApolloAPI.JSONDecodable where Key == Swift.String, Value == Swift.AnyHashable {
  @inlinable public init(_jsonValue value: ApolloAPI.JSONValue) throws {
    guard let dictionary = value as? JSONObject else {
      throw JSONDecodingError.couldNotConvert(value: value, to: JSONObject.self)
    }

    self = dictionary
  }
}
extension Swift.Array : ApolloAPI.JSONEncodable {
  @inlinable public var _jsonValue: ApolloAPI.JSONValue {
    get {
    return map { element -> JSONValue in
      if case let element as JSONEncodable = element {
        return element._jsonValue
      } else {
        fatalError("Array is only JSONEncodable if Element is")
      }
    }
  }
  }
}
public enum GraphQLEnum<T> : Swift.CaseIterable, Swift.Hashable, Swift.RawRepresentable where T : ApolloAPI.EnumType {
  public typealias RawValue = Swift.String
  case `case`(T)
  case unknown(Swift.String)
  @inlinable public init(_ caseValue: T) {
    self = .case(caseValue)
  }
  @inlinable public init(rawValue: Swift.String) {
    guard let caseValue = T(rawValue: rawValue) else {
      self = .unknown(rawValue)
      return
    }
    self = .case(caseValue)
  }
  @inlinable public init(_ rawValue: Swift.String) {
    self.init(rawValue: rawValue)
  }
  @inlinable public var value: T? {
    get {
    switch self {
    case let .case(value): return value
    default: return nil
    }
  }
  }
  @inlinable public var rawValue: Swift.String {
    get {
    switch self {
    case let .case(value): return value.rawValue
    case let .unknown(value): return value
    }
  }
  }
  @inlinable public static var allCases: [ApolloAPI.GraphQLEnum<T>] {
    get {
    return T.allCases.map { .case($0) }
  }
  }
  public typealias AllCases = [ApolloAPI.GraphQLEnum<T>]
}
extension ApolloAPI.GraphQLEnum : ApolloAPI.CustomScalarType {
  @inlinable public init(_jsonValue: ApolloAPI.JSONValue) throws {
    guard let stringData = _jsonValue as? String else {
      throw JSONDecodingError.couldNotConvert(value: _jsonValue, to: String.self)      
    }
    self.init(rawValue: stringData)
  }
}
extension ApolloAPI.GraphQLEnum {
  @inlinable public static func == (lhs: ApolloAPI.GraphQLEnum<T>, rhs: ApolloAPI.GraphQLEnum<T>) -> Swift.Bool {
    return lhs.rawValue == rhs.rawValue
  }
  @inlinable public static func == (lhs: ApolloAPI.GraphQLEnum<T>, rhs: T) -> Swift.Bool {
    return lhs.rawValue == rhs.rawValue
  }
  @inlinable public static func != (lhs: ApolloAPI.GraphQLEnum<T>, rhs: T) -> Swift.Bool {
    return lhs.rawValue != rhs.rawValue
  }
}
@inlinable public func == <T>(lhs: ApolloAPI.GraphQLEnum<T>?, rhs: T) -> Swift.Bool where T : ApolloAPI.EnumType {
  return lhs?.rawValue == rhs.rawValue
}
@inlinable public func != <T>(lhs: ApolloAPI.GraphQLEnum<T>?, rhs: T) -> Swift.Bool where T : ApolloAPI.EnumType {
  return lhs?.rawValue != rhs.rawValue
}
extension ApolloAPI.GraphQLEnum {
  @inlinable public static func ~= (lhs: T, rhs: ApolloAPI.GraphQLEnum<T>) -> Swift.Bool {
    switch rhs {
    case let .case(rhs) where rhs == lhs: return true
    case let .unknown(rhsRawValue) where rhsRawValue == lhs.rawValue: return true
    default: return false
    }
  }
}
public struct Union : Swift.Hashable {
  public let name: Swift.String
  public let possibleTypes: [ApolloAPI.Object]
  public init(name: Swift.String, possibleTypes: [ApolloAPI.Object])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ApolloAPI.Union, b: ApolloAPI.Union) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ApolloAPI.Selection {
  public struct Conditions : Swift.Hashable {
    public let value: [[ApolloAPI.Selection.Condition]]
    public init(_ value: [[ApolloAPI.Selection.Condition]])
    public init(_ conditions: [ApolloAPI.Selection.Condition]...)
    public init(_ condition: ApolloAPI.Selection.Condition)
    @inlinable public static func || (lhs: ApolloAPI.Selection.Conditions, rhs: [ApolloAPI.Selection.Condition]) -> ApolloAPI.Selection.Conditions {
      var newValue = lhs.value
      newValue.append(rhs)
      return .init(newValue)
    }
    @inlinable public static func || (lhs: ApolloAPI.Selection.Conditions, rhs: ApolloAPI.Selection.Condition) -> ApolloAPI.Selection.Conditions {
      lhs || [rhs]
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: ApolloAPI.Selection.Conditions, b: ApolloAPI.Selection.Conditions) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Condition : Swift.ExpressibleByStringLiteral, Swift.Hashable {
    public let variableName: Swift.String
    public let inverted: Swift.Bool
    public init(variableName: Swift.String, inverted: Swift.Bool)
    public init(stringLiteral value: Swift.StringLiteralType)
    @inlinable prefix public static func ! (value: ApolloAPI.Selection.Condition) -> ApolloAPI.Selection.Condition {
      .init(variableName: value.variableName, inverted: !value.inverted)
    }
    @inlinable public static func && (lhs: ApolloAPI.Selection.Condition, rhs: ApolloAPI.Selection.Condition) -> [ApolloAPI.Selection.Condition] {
      [lhs, rhs]
    }
    @inlinable public static func && (lhs: [ApolloAPI.Selection.Condition], rhs: ApolloAPI.Selection.Condition) -> [ApolloAPI.Selection.Condition] {
      var newValue = lhs
      newValue.append(rhs)
      return newValue
    }
    @inlinable public static func || (lhs: ApolloAPI.Selection.Condition, rhs: ApolloAPI.Selection.Condition) -> ApolloAPI.Selection.Conditions {
      .init([[lhs], [rhs]])
    }
    @inlinable public static func || (lhs: [ApolloAPI.Selection.Condition], rhs: ApolloAPI.Selection.Condition) -> ApolloAPI.Selection.Conditions {
      .init([lhs, [rhs]])
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: ApolloAPI.Selection.Condition, b: ApolloAPI.Selection.Condition) -> Swift.Bool
    public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
    public typealias StringLiteralType = Swift.StringLiteralType
    public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension ApolloAPI.Selection.Conditions {
  public func evaluate(with variables: [Swift.String : ApolloAPI.GraphQLOperationVariableValue]?) -> Swift.Bool
}
